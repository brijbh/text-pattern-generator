{"ast":null,"code":"export const fillTextPatterns = (ctx, text, colors, canvas) => {\n  const {\n    width,\n    height\n  } = canvas;\n  const numberOfTexts = 300; // Default number of texts, can be modified to be dynamic\n  const rotations = [0, 15, 45, 90, -15, -45, -90];\n  const fontFamilies = [\"Arial\", \"Verdana\", \"Times New Roman\", \"Courier New\", \"Georgia\", \"Roboto\", \"Lobster\", \"Open Sans\"];\n  const fontWeights = [\"normal\", \"bold\", \"bolder\", \"lighter\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"];\n  const fontSizeRange = [10, 80];\n  for (let i = 0; i < numberOfTexts; i++) {\n    const fontSize = Math.random() * (fontSizeRange[1] - fontSizeRange[0]) + fontSizeRange[0];\n    const fontWeight = fontWeights[Math.floor(Math.random() * fontWeights.length)];\n    const rotation = rotations[Math.floor(Math.random() * rotations.length)];\n    ctx.save(); // Save the current state\n\n    let x, y;\n    let positionValid = false;\n    let attempts = 0;\n    const maxSteps = 1000;\n    while (!positionValid && attempts < maxSteps) {\n      x = Math.random() * (width - fontSize);\n      y = Math.random() * (height - fontSize);\n      positionValid = ctx.isPointInPath(x, y);\n      attempts++;\n    }\n    if (attempts === maxSteps) {\n      console.warn(`Could not find a valid position for text instance ${i} after ${maxSteps} attempts`);\n      continue;\n    }\n    ctx.translate(x, y);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.font = `${fontWeight} ${fontSize}px ${fontFamilies[Math.floor(Math.random() * fontFamilies.length)]}`;\n    ctx.fillStyle = colors[Math.floor(Math.random() * colors.length)];\n    ctx.fillText(text, 0, 0);\n    ctx.restore(); // Restore the state\n  }\n};","map":{"version":3,"names":["fillTextPatterns","ctx","text","colors","canvas","width","height","numberOfTexts","rotations","fontFamilies","fontWeights","fontSizeRange","i","fontSize","Math","random","fontWeight","floor","length","rotation","save","x","y","positionValid","attempts","maxSteps","isPointInPath","console","warn","translate","rotate","PI","font","fillStyle","fillText","restore"],"sources":["C:/Users/Bhive/OneDrive/Documents/simba/ekin/text-pattern-generator/src/utils/textUtils.js"],"sourcesContent":["export const fillTextPatterns = (ctx, text, colors, canvas) => {\r\n    const { width, height } = canvas;\r\n    const numberOfTexts = 300; // Default number of texts, can be modified to be dynamic\r\n    const rotations = [0, 15, 45, 90, -15, -45, -90];\r\n    const fontFamilies = [\"Arial\", \"Verdana\", \"Times New Roman\", \"Courier New\", \"Georgia\", \"Roboto\", \"Lobster\", \"Open Sans\"];\r\n    const fontWeights = [\"normal\", \"bold\", \"bolder\", \"lighter\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"];\r\n    const fontSizeRange = [10, 80];\r\n\r\n    for (let i = 0; i < numberOfTexts; i++) {\r\n        const fontSize = Math.random() * (fontSizeRange[1] - fontSizeRange[0]) + fontSizeRange[0];\r\n        const fontWeight = fontWeights[Math.floor(Math.random() * fontWeights.length)];\r\n        const rotation = rotations[Math.floor(Math.random() * rotations.length)];\r\n\r\n        ctx.save(); // Save the current state\r\n\r\n        let x, y;\r\n        let positionValid = false;\r\n        let attempts = 0;\r\n        const maxSteps = 1000;\r\n        while (!positionValid && attempts < maxSteps) {\r\n            x = Math.random() * (width - fontSize);\r\n            y = Math.random() * (height - fontSize);\r\n            positionValid = ctx.isPointInPath(x, y);\r\n            attempts++;\r\n        }\r\n        if (attempts === maxSteps) {\r\n            console.warn(`Could not find a valid position for text instance ${i} after ${maxSteps} attempts`);\r\n            continue;\r\n        }\r\n\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation * Math.PI / 180);\r\n        ctx.font = `${fontWeight} ${fontSize}px ${fontFamilies[Math.floor(Math.random() * fontFamilies.length)]}`;\r\n        ctx.fillStyle = colors[Math.floor(Math.random() * colors.length)];\r\n        ctx.fillText(text, 0, 0);\r\n\r\n        ctx.restore(); // Restore the state\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}